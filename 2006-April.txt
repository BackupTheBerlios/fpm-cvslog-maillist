From nobody at sheep.berlios.de  Sun Apr  2 18:44:55 2006
From: nobody at sheep.berlios.de (ivop)
Date: Sun, 2 Apr 2006 18:44:55 +0200
Subject: [fpm-cvslog] fpm ChangeLog,1.3,1.4
Message-ID: <200604021644.k32Gitt29415@bat.berlios.de>

Update of /cvsroot/fpm/fpm
In directory sheep:/tmp/cvs-serv11844

Modified Files:
	ChangeLog 
Log Message:
huge speed improvement of algorithmic sqrt() calculation, by removing
conditional statements



Index: ChangeLog
===================================================================
RCS file: /cvsroot/fpm/fpm/ChangeLog,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -d -r1.3 -r1.4
--- ChangeLog	6 Jan 2006 23:35:28 -0000	1.3
+++ ChangeLog	2 Apr 2006 16:45:18 -0000	1.4
@@ -3,6 +3,9 @@
 
 $Id$
 
+    - huge speed improvement of algorithmic versions of sqrt(). 40-100 times(!)
+      faster, depending on type, by elimination of conditional code
+    - fixed dependencies, miscellaneous freebsd fixes
     - added detection of inttypes.h and stdint.h (define ourselves if missing)
     - made luts const
     - fixed pow macros for x==1



From nobody at sheep.berlios.de  Sun Apr  2 18:44:55 2006
From: nobody at sheep.berlios.de (ivop)
Date: Sun, 2 Apr 2006 18:44:55 +0200
Subject: [fpm-cvslog] fpm/include fixedpointmathcode.h,1.3,1.4
Message-ID: <200604021644.k32Gitt29414@bat.berlios.de>

Update of /cvsroot/fpm/fpm/include
In directory sheep:/tmp/cvs-serv11844/include

Modified Files:
	fixedpointmathcode.h 
Log Message:
huge speed improvement of algorithmic sqrt() calculation, by removing
conditional statements



Index: fixedpointmathcode.h
===================================================================
RCS file: /cvsroot/fpm/fpm/include/fixedpointmathcode.h,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -d -r1.3 -r1.4
--- fixedpointmathcode.h	6 Jan 2006 18:35:41 -0000	1.3
+++ fixedpointmathcode.h	2 Apr 2006 16:45:19 -0000	1.4
@@ -187,111 +187,127 @@
 
 /* ------------------------------------------------------------------------- */
 
-/* >>> Square root <<< */
-
-/* I've tried numerous algorithms here (Newton, Knuth, Halleck, etc...) but
- * for any type larger than 8p8 they became way too slow (factor 15++ slower
- * than the FPU), so I have to resort to a simple binary search
- * convergence algorithm for now. At least it's only 3-11 times slower,
- * depending on the type chosen :/  It does tend to be less precise though
- * as x increases. Have to check how these algorithms perform on older
- * CPU's without a modern FPU.
+/* unsigned a less|greater than b for 16-bit and 32-bit types
+ * result: 0 or 1
  */
 
+#define _ualtb16(a,b)  ((((uint32_t)a-(uint32_t)b)>>31)&1)
+#define _ualtb32(a,b)  ((((uint64_t)a-(uint64_t)b)>>63)&1)
+#define _uagtb16(a,b)  _ualtb16(b,a)
+#define _uagtb32(a,b)  _ualtb32(b,a)
+
+/* >>> Square root <<< */
+
 /* temporary variables */
 
-static ufp8p8_t   _ufp8p8tmp,   _ufp8p8tmp2;
-static ufp24p8_t  _ufp24p8tmp,  _ufp24p8tmp2;
-static ufp16p16_t _ufp16p16tmp, _ufp16p16tmp2;
-static ufp8p24_t  _ufp8p24tmp,  _ufp8p24tmp2;
+static ufp8p8_t   _ufp8p8tmp,   _ufp8p8tmp2,    _ufp8p8tmp3;
+static ufp24p8_t  _ufp24p8tmp,  _ufp24p8tmp2,   _ufp24p8tmp3;
+static ufp16p16_t _ufp16p16tmp, _ufp16p16tmp2,  _ufp16p16tmp3;
+static ufp8p24_t  _ufp8p24tmp,  _ufp8p24tmp2,   _ufp8p24tmp3;
 
 #define _mid(a,b)           (a+((b-a)>>1))
 
-#define _convergeufp8p8(a,b,x)    ( (_mulufp8p8(_mid(a,b),_mid(a,b))<x)   ? \
-                                       (a=_mid(a,b)):(b=_mid(a,b)) )
-#define _convergeufp24p8(a,b,x)   ( (_mulufp24p8(_mid(a,b),_mid(a,b))<x)  ? \
-                                       (a=_mid(a,b)):(b=_mid(a,b)) )
-#define _convergeufp16p16(a,b,x)  ( (_mulufp16p16(_mid(a,b),_mid(a,b))<x) ? \
-                                       (a=_mid(a,b)):(b=_mid(a,b)) )
-#define _convergeufp8p24(a,b,x)   ( (_mulufp8p24(_mid(a,b),_mid(a,b))<x)  ? \
-                                       (a=_mid(a,b)):(b=_mid(a,b)) )
+#define _convergeufp8p8(a,b,m,x)    ( \
+            ( (m=(_ualtb16(_mulufp8p8(_mid(a,b),_mid(a,b)),x)))||1) &&    \
+            ( (a=m*_mid(a,b)+(1-m)*a)||1 ) && ( (b=(1-m)*_mid(a,b)+m*b)||1 ) \
+                                    )
+#define _convergeufp24p8(a,b,m,x)   ( \
+            ( (m=(_ualtb32(_mulufp24p8(_mid(a,b),_mid(a,b)),x)))||1) &&   \
+            ( (a=m*_mid(a,b)+(1-m)*a)||1 ) && ( (b=(1-m)*_mid(a,b)+m*b)||1 ) \
+                                    )
+#define _convergeufp16p16(a,b,m,x)   ( \
+            ( (m=(_ualtb32(_mulufp16p16(_mid(a,b),_mid(a,b)),x)))||1) &&   \
+            ( (a=m*_mid(a,b)+(1-m)*a)||1 ) && ( (b=(1-m)*_mid(a,b)+m*b)||1 ) \
+                                    )
+#define _convergeufp8p24(a,b,m,x)   ( \
+            ( (m=(_ualtb32(_mulufp8p24(_mid(a,b),_mid(a,b)),x)))||1) &&   \
+            ( (a=m*_mid(a,b)+(1-m)*a)||1 ) && ( (b=(1-m)*_mid(a,b)+m*b)||1 ) \
+                                    )
 
-#define __sqrtufp8p8(a,b,x)   ( (x>(4<<8)) ? (a=1<<8) && (b=(x>>1)) \
-                                           : ((a=0)||1) && (b=x<<1) \
-                              ) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
-                              && _convergeufp8p8(a,b,x) \
+#define __sqrtufp8p8(a,b,m,x)   ( ((m=_uagtb16(x,(4<<8)))||1) && \
+                                  ((a=m*(1<<8))||1) &&               \
+                                  ((b=m*(x>>1)+(1-m)*(x<<1))||1)     ) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
+                              && _convergeufp8p8(a,b,m,x) \
                               ? _mid(a,b) : 0
 
-#define __sqrtufp24p8(a,b,x)  ( (x>(4<<8)) ? (a=1<<8) && (b=(x>>1)) \
-                                           : ((a=0)||1) && (b=x<<1) \
-                              ) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              && _convergeufp24p8(a,b,x) \
-                              ? _mid(a,b) : 0
+#define __sqrtufp24p8(a,b,m,x)  ( ((m=_uagtb32(x,(4<<8)))||1) && \
+                                  ((a=m*(1<<8))||1) &&               \
+                                  ((b=m*(x>>1)+(1-m)*(x<<1))||1)     ) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                && _convergeufp24p8(a,b,m,x) \
+                                ? _mid(a,b) : 0
 
-#define __sqrtufp16p16(a,b,x) ( (x>(4<<16)) ? (a=1<<16) && (b=(x>>1)) \
-                                           : ((a=0)||1) && (b=x<<1) \
-                              ) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
-                              && _convergeufp16p16(a,b,x) \
+#define __sqrtufp16p16(a,b,m,x)  ( ((m=_uagtb32(x,(4<<16)))||1) && \
+                                   ((a=m*(1<<16))||1) &&               \
+                                   ((b=m*(x>>1)+(1-m)*(x<<1))||1)     ) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
+                              && _convergeufp16p16(a,b,m,x) \
                               ? _mid(a,b) : 0
 
-#define __sqrtufp8p24(a,b,x) ( (x>(4<<24)) ? (a=1<<24) && (b=(x>>1)) \
-                                           : ((a=0)||1) && (b=x<<1) \
-                              ) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
-                              && _convergeufp8p24(a,b,x) \
+#define __sqrtufp8p24(a,b,m,x)  ( ((m=_uagtb32(x,(4<<24)))||1) && \
+                                   ((a=m*(1<<24))||1) &&               \
+                                   ((b=m*(x>>1)+(1-m)*(x<<1))||1)     ) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
+                              && _convergeufp8p24(a,b,m,x) \
                               ? _mid(a,b) : 0
 
-#define _sqrtufp8p8(x)      __sqrtufp8p8  (_ufp8p8tmp,   _ufp8p8tmp2,   x)
-#define _sqrtufp24p8(x)     __sqrtufp24p8 (_ufp24p8tmp,  _ufp24p8tmp2,  x)
-#define _sqrtufp16p16(x)    __sqrtufp16p16(_ufp16p16tmp, _ufp16p16tmp2, x)
-#define _sqrtufp8p24(x)     __sqrtufp8p24 (_ufp8p24tmp,  _ufp8p24tmp2,  x)
+#define _sqrtufp8p8(x)      __sqrtufp8p8  (_ufp8p8tmp,   _ufp8p8tmp2,   \
+                                           _ufp8p8tmp3,   x)
+#define _sqrtufp24p8(x)     __sqrtufp24p8 (_ufp24p8tmp,  _ufp24p8tmp2,  \
+                                           _ufp24p8tmp3,  x)
+#define _sqrtufp16p16(x)    __sqrtufp16p16(_ufp16p16tmp, _ufp16p16tmp2, \
+                                           _ufp16p16tmp3, x)
+#define _sqrtufp8p24(x)     __sqrtufp8p24 (_ufp8p24tmp,  _ufp8p24tmp2,  \
+                                           _ufp8p24tmp3,  x)
 
 #define _sqrtfp8p8(x)       (x>0 ? _sqrtufp8p8(x)   : 0)
 #define _sqrtfp24p8(x)      (x>0 ? _sqrtufp24p8(x)  : 0)



From nobody at sheep.berlios.de  Mon Apr  3 16:27:57 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 16:27:57 +0200
Subject: [fpm-cvslog] fpm ChangeLog,1.4,1.5 configure,1.6,1.7 genlut.c,1.3,1.4
Message-ID: <200604031427.k33ERvt19583@bat.berlios.de>

Update of /cvsroot/fpm/fpm
In directory sheep:/tmp/cvs-serv3073

Modified Files:
	ChangeLog configure genlut.c 
Log Message:
fix for systems that don't have round()



Index: ChangeLog
===================================================================
RCS file: /cvsroot/fpm/fpm/ChangeLog,v
retrieving revision 1.4
retrieving revision 1.5
diff -u -d -r1.4 -r1.5
--- ChangeLog	2 Apr 2006 16:45:18 -0000	1.4
+++ ChangeLog	3 Apr 2006 14:28:19 -0000	1.5
@@ -3,6 +3,7 @@
 
 $Id$
 
+    - fix for systems that don't have round()
     - huge speed improvement of algorithmic versions of sqrt(). 40-100 times(!)
       faster, depending on type, by elimination of conditional code
     - fixed dependencies, miscellaneous freebsd fixes

Index: configure
===================================================================
RCS file: /cvsroot/fpm/fpm/configure,v
retrieving revision 1.6
retrieving revision 1.7
diff -u -d -r1.6 -r1.7
--- configure	1 Mar 2006 11:25:20 -0000	1.6
+++ configure	3 Apr 2006 14:28:19 -0000	1.7
@@ -237,6 +237,22 @@
 
 
 
+echocheck "round()"
+cat > $TMPC <<EOF
+#include <math.h>
+int main(void) { double d=1.23; d=round(d); return 0; }
+EOF
+cc_check -lm && _round=yes
+if test "$_round" = yes ; then
+    echores "yes"
+    _round="-DHAVE_ROUND"
+else
+    echores "no"
+    _round=""
+fi
+
+
+
 echocheck "inttypes.h"
 cat > $TMPC << EOF
 #include <inttypes.h>
@@ -417,7 +433,7 @@
 echo ${_echo_n} "Generating config.mak ... ${_echo_c}"
 cat > config.mak << EOF
 CC=$_cc
-CFLAGS=$_cflags $_inttypes $_stdint
+CFLAGS=$_cflags $_inttypes $_stdint $_round
 INCLUDES=-I./include $_inc_extra
 CCFORDEPS=$_ccfordeps
 LD=$_cc

Index: genlut.c
===================================================================
RCS file: /cvsroot/fpm/fpm/genlut.c,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -d -r1.3 -r1.4
--- genlut.c	6 Jan 2006 18:35:40 -0000	1.3
+++ genlut.c	3 Apr 2006 14:28:19 -0000	1.4
@@ -30,6 +30,9 @@
 typedef          char       int8_t;
 #endif
 #endif
+#ifndef HAVE_ROUND
+#define round(x) rint(x)
+#endif
 
 /* ------------------------------------------------------------------------- */
 



From nobody at sheep.berlios.de  Mon Apr  3 17:31:16 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 17:31:16 +0200
Subject: [fpm-cvslog] fpm benchmark.c,1.1,1.2 configure,1.7,1.8
Message-ID: <200604031531.k33FVGt24451@bat.berlios.de>

Update of /cvsroot/fpm/fpm
In directory sheep:/tmp/cvs-serv491

Modified Files:
	benchmark.c configure 
Log Message:
don't compile RDTSC code on i386/i486 cpu's
check for cpu in configure



Index: benchmark.c
===================================================================
RCS file: /cvsroot/fpm/fpm/benchmark.c,v
retrieving revision 1.1
retrieving revision 1.2
diff -u -d -r1.1 -r1.2
--- benchmark.c	13 Sep 2005 03:31:02 -0000	1.1
+++ benchmark.c	3 Apr 2006 15:31:40 -0000	1.2
@@ -32,9 +32,13 @@
 
 static inline long long rdtsc()
 {
+#ifdef HAVE_RDTSC
     long long timestamp;
     asm volatile ("rdtsc\n" : "=A"(timestamp));
     return timestamp;
+#else
+    return 0L;      /* FIXME: some gettimeofday() stuff or something */
+#endif
 }
 
 /* ------------------------------------------------------------------------- */

Index: configure
===================================================================
RCS file: /cvsroot/fpm/fpm/configure,v
retrieving revision 1.7
retrieving revision 1.8
diff -u -d -r1.7 -r1.8
--- configure	3 Apr 2006 14:28:19 -0000	1.7
+++ configure	3 Apr 2006 15:31:40 -0000	1.8
@@ -186,12 +186,31 @@
 
 # Do tests...
 
+
+
+echocheck "architecture"
+cputype=`uname -p 2>&1`
+if test "$cputype" = "unknown" ; then
+    cputype=`uname -m 2>&1`
+fi
+echores "$cputype"
+
+
+
 echocheck "C compiler"
 cc_run=`( $_cc ) 2>&1`
 if test "$?" -gt 1; then
     echores "no"
     die "Can't find compiler"
 fi
+case "$cputype" in
+    i386|i486)
+        _rdtsc=
+        ;;
+    *)
+        _rdtsc=-DHAVE_RDTSC
+        ;;
+esac
 echores "$_cc"
 
 
@@ -433,7 +452,7 @@
 echo ${_echo_n} "Generating config.mak ... ${_echo_c}"
 cat > config.mak << EOF
 CC=$_cc
-CFLAGS=$_cflags $_inttypes $_stdint $_round
+CFLAGS=$_cflags $_inttypes $_stdint $_round $_rdtsc
 INCLUDES=-I./include $_inc_extra
 CCFORDEPS=$_ccfordeps
 LD=$_cc



From nobody at sheep.berlios.de  Mon Apr  3 18:20:36 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 18:20:36 +0200
Subject: [fpm-cvslog] fpm benchmark.c,1.2,1.3
Message-ID: <200604031620.k33GKat27395@bat.berlios.de>

Update of /cvsroot/fpm/fpm
In directory sheep:/tmp/cvs-serv6217

Modified Files:
	benchmark.c 
Log Message:
fix possible divide by zero



Index: benchmark.c
===================================================================
RCS file: /cvsroot/fpm/fpm/benchmark.c,v
retrieving revision 1.2
retrieving revision 1.3
diff -u -d -r1.2 -r1.3
--- benchmark.c	3 Apr 2006 15:31:40 -0000	1.2
+++ benchmark.c	3 Apr 2006 16:21:00 -0000	1.3
@@ -85,7 +85,7 @@
 
 #define calcperc(PRC, AVG, AVGR) \
     do { \
-        PRC = (AVG*100)/AVGR; \
+        PRC = (AVG*100)/(AVGR?AVGR:1); \
     } while(0)
 
 #define calcallperc \



From nobody at sheep.berlios.de  Mon Apr  3 22:37:20 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 22:37:20 +0200
Subject: [fpm-cvslog] fpm benchmark.c,1.3,1.4 configure,1.8,1.9 genlut.c,1.4,1.5
Message-ID: <200604032037.k33KbKt06394@bat.berlios.de>

Update of /cvsroot/fpm/fpm
In directory sheep:/tmp/cvs-serv8000

Modified Files:
	benchmark.c configure genlut.c 
Log Message:
added check for types.h (old systems)
code for timestamps if rdtsc instruction is not available (<=i486)



Index: benchmark.c
===================================================================
RCS file: /cvsroot/fpm/fpm/benchmark.c,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -d -r1.3 -r1.4
--- benchmark.c	3 Apr 2006 16:21:00 -0000	1.3
+++ benchmark.c	3 Apr 2006 20:37:44 -0000	1.4
@@ -17,6 +17,11 @@
 
 #include "fixedpointmath.h"
 
+#ifndef HAVE_RDTSC
+#include <sys/time.h>
+#include <time.h>
+#endif
+
 /* ------------------------------------------------------------------------- */
 
 /* 10000 and 100000 or something, but lower values while testing scripts,
@@ -37,7 +42,12 @@
     asm volatile ("rdtsc\n" : "=A"(timestamp));
     return timestamp;
 #else
-    return 0L;      /* FIXME: some gettimeofday() stuff or something */
+    struct timeval tv;
+    struct timezone tz;
+
+    gettimeofday(&tv, &tz);
+    
+    return tv.tv_sec*1000000L + tv.tv_usec;
 #endif
 }
 

Index: configure
===================================================================
RCS file: /cvsroot/fpm/fpm/configure,v
retrieving revision 1.8
retrieving revision 1.9
diff -u -d -r1.8 -r1.9
--- configure	3 Apr 2006 15:31:40 -0000	1.8
+++ configure	3 Apr 2006 20:37:44 -0000	1.9
@@ -296,6 +296,19 @@
     else
         echores "no"
         _stdint=""
+        echocheck "types.h"
+        cat > $TMPC << EOF
+#include <types.h>
+int main(void) { return 0; }
+EOF
+        cc_check && _types=yes
+        if test "$_types" = yes ; then
+            echores "yes"
+            _types="-DHAVE_TYPES_H"
+        else
+            echores "no"
+            _types=""
+        fi
     fi
 fi
 
@@ -452,7 +465,7 @@
 echo ${_echo_n} "Generating config.mak ... ${_echo_c}"
 cat > config.mak << EOF
 CC=$_cc
-CFLAGS=$_cflags $_inttypes $_stdint $_round $_rdtsc
+CFLAGS=$_cflags $_inttypes $_stdint $_round $_rdtsc $_types
 INCLUDES=-I./include $_inc_extra
 CCFORDEPS=$_ccfordeps
 LD=$_cc

Index: genlut.c
===================================================================
RCS file: /cvsroot/fpm/fpm/genlut.c,v
retrieving revision 1.4
retrieving revision 1.5
diff -u -d -r1.4 -r1.5
--- genlut.c	3 Apr 2006 14:28:19 -0000	1.4
+++ genlut.c	3 Apr 2006 20:37:44 -0000	1.5
@@ -20,6 +20,9 @@
 #ifdef HAVE_STDINT_H
 #include <stdint.h>
 #else
+#ifdef HAVE_TYPES_H
+#include <types.h>
+#else
 typedef unsigned long long uint64_t;
 typedef          long long  int64_t;
 typedef unsigned long      uint32_t;
@@ -28,6 +31,7 @@
 typedef          short      int16_t;
 typedef unsigned char      uint8_t;
 typedef          char       int8_t;
+#endif
 #endif
 #endif
 #ifndef HAVE_ROUND



From nobody at sheep.berlios.de  Mon Apr  3 22:37:20 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 22:37:20 +0200
Subject: [fpm-cvslog] fpm/include fixedpointmath.h,1.3,1.4
Message-ID: <200604032037.k33KbKt06397@bat.berlios.de>

Update of /cvsroot/fpm/fpm/include
In directory sheep:/tmp/cvs-serv8000/include

Modified Files:
	fixedpointmath.h 
Log Message:
added check for types.h (old systems)
code for timestamps if rdtsc instruction is not available (<=i486)



Index: fixedpointmath.h
===================================================================
RCS file: /cvsroot/fpm/fpm/include/fixedpointmath.h,v
retrieving revision 1.3
retrieving revision 1.4
diff -u -d -r1.3 -r1.4
--- fixedpointmath.h	6 Jan 2006 18:35:41 -0000	1.3
+++ fixedpointmath.h	3 Apr 2006 20:37:45 -0000	1.4
@@ -30,6 +30,9 @@
 #ifdef HAVE_STDINT_H
 #include <stdint.h>
 #else
+#ifdef HAVE_TYPES_H
+#include <types.h>
+#else
 typedef unsigned long long uint64_t;
 typedef          long long  int64_t;
 typedef unsigned long      uint32_t;
@@ -38,6 +41,7 @@
 typedef          short      int16_t;
 typedef unsigned char      uint8_t;
 typedef          char       int8_t;
+#endif
 #endif
 #endif
 



From nobody at sheep.berlios.de  Mon Apr  3 22:42:23 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 22:42:23 +0200
Subject: [fpm-cvslog] fpm configure,1.9,1.10 genlut.c,1.5,1.6
Message-ID: <200604032042.k33KgNt06577@bat.berlios.de>

Update of /cvsroot/fpm/fpm
In directory sheep:/tmp/cvs-serv8536

Modified Files:
	configure genlut.c 
Log Message:
fix types.h check (sys/types.h)



Index: configure
===================================================================
RCS file: /cvsroot/fpm/fpm/configure,v
retrieving revision 1.9
retrieving revision 1.10
diff -u -d -r1.9 -r1.10
--- configure	3 Apr 2006 20:37:44 -0000	1.9
+++ configure	3 Apr 2006 20:42:47 -0000	1.10
@@ -37,6 +37,8 @@
 _fig2dev_png=
 _inttypes=
 _stdint=
+_round=
+_types=
 
 
 # check environment
@@ -298,7 +300,7 @@
         _stdint=""
         echocheck "types.h"
         cat > $TMPC << EOF
-#include <types.h>
+#include <sys/types.h>
 int main(void) { return 0; }
 EOF
         cc_check && _types=yes

Index: genlut.c
===================================================================
RCS file: /cvsroot/fpm/fpm/genlut.c,v
retrieving revision 1.5
retrieving revision 1.6
diff -u -d -r1.5 -r1.6
--- genlut.c	3 Apr 2006 20:37:44 -0000	1.5
+++ genlut.c	3 Apr 2006 20:42:47 -0000	1.6
@@ -21,7 +21,7 @@
 #include <stdint.h>
 #else
 #ifdef HAVE_TYPES_H
-#include <types.h>
+#include <sys/types.h>
 #else
 typedef unsigned long long uint64_t;
 typedef          long long  int64_t;



From nobody at sheep.berlios.de  Mon Apr  3 22:42:23 2006
From: nobody at sheep.berlios.de (ivop)
Date: Mon, 3 Apr 2006 22:42:23 +0200
Subject: [fpm-cvslog] fpm/include fixedpointmath.h,1.4,1.5
Message-ID: <200604032042.k33KgNt06581@bat.berlios.de>

Update of /cvsroot/fpm/fpm/include
In directory sheep:/tmp/cvs-serv8536/include

Modified Files:
	fixedpointmath.h 
Log Message:
fix types.h check (sys/types.h)



Index: fixedpointmath.h
===================================================================
RCS file: /cvsroot/fpm/fpm/include/fixedpointmath.h,v
retrieving revision 1.4
retrieving revision 1.5
diff -u -d -r1.4 -r1.5
--- fixedpointmath.h	3 Apr 2006 20:37:45 -0000	1.4
+++ fixedpointmath.h	3 Apr 2006 20:42:47 -0000	1.5
@@ -31,7 +31,7 @@
 #include <stdint.h>
 #else
 #ifdef HAVE_TYPES_H
-#include <types.h>
+#include <sys/types.h>
 #else
 typedef unsigned long long uint64_t;
 typedef          long long  int64_t;



